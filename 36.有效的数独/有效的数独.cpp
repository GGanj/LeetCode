/*
 * @lc app=leetcode.cn id=36 lang=cpp
 *
 * [36] 有效的数独
 *
 * https://leetcode-cn.com/problems/valid-sudoku/description/
 *
 * algorithms
 * Medium (63.50%)
 * Likes:    865
 * Dislikes: 0
 * Total Accepted:    278.6K
 * Total Submissions: 439.2K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 
 * 
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 
 * 
 * 
 * 
 * 注意：
 * 
 * 
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 * 
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：board = 
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：board = 
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在,
 * 因此这个数独是无效的。
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字（1-9）或者 '.'
 * 
 * 
 */
#include <iostream>
#include <vector>
#include <unordered_set>
// @lc code=start
class Solution {
public:
    bool isValidSudoku(std::vector<std::vector<char>>& board) {
        bool res = true;
        std::unordered_set<char> row, col, block;
        for(int i = 0; i < 9; ++i) {
            for(int j = 0; j < 9; ++j) {
                if(board[i][j] != '.') {
                    if(row.find(board[i][j]) != row.end()) {
                        res = false;
                        break;
                    } else {
                        row.insert(board[i][j]);
                    }
                } 
                if(board[j][i] != '.') {
                    if(col.find(board[j][i]) != col.end()) {
                        res = false;
                        break;
                    } else {
                        col.insert(board[j][i]);
                    }
                }
                int x = i / 3 * 3 + j / 3;
                int y = i % 3 * 3 + j % 3;
                if(board[x][y] != '.') {
                    if(block.find(board[x][y]) != block.end()) {
                        res = false;
                        break;
                    }
                    else {
                        block.insert(board[x][y]);
                    }
                }

            }
            if(!res) {
                break;
            }
            row.clear();
            col.clear();
            block.clear();
        }
        return res;
    }
};
// @lc code=end

void main() {
    Solution s;
    std::vector<std::vector<char>> board = {
        {'.','.','.',  '.','5','.',  '.','1','.'},
        {'.','4','.',  '3','.','.',  '.','.','.'},
        {'.','.','.',  '.','.','3',  '.','.','1'},

        {'8','.','.',  '.','.','.',  '.','2','.'},
        {'.','.','2',  '.','7','.',  '.','.','.'},
        {'.','1','5',  '.','.','.',  '.','.','.'},

        {'.','.','.',  '.','.','2',  '.','.','.'},
        {'.','2','.',  '9','.','.',  '.','.','.'},
        {'.','.','4',  '.','.','.',  '.','.','.'}
    };

    bool res = s.isValidSudoku(board);
    std::cout << res << std::endl;
    return;
}
